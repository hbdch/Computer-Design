// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	Not(in=instruction[15] ,out=instype );
	Mux16(a=out8 ,b=instruction ,sel=instype ,out=out1 );
	
	Or(a=instype, b=instruction[5], out=out2);
	ARegister(in=out1, load=out2, out[0..14]=addressM, out=out3);
	
	And(a=instruction[15], b=instruction[4], out=out4);
	DRegister(in=out8, load=out4, out=out5);
	
	And(a=instruction[15], b=instruction[12], out=out6);
	Mux16(a=out3, b=inM, sel=out6, out=out7);
	
	ALU(x=out5 ,y=out7 ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=out8 ,zr=out9 ,ng=out10); 
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	Not(in=out9, out=out11);
	Not(in=out10, out=out12);
	
	And(a=instruction[15], b=instruction[0], out=out13);
	And(a=out12, b=out11, out=out14);
	And(a=out13, b=out14, out=out15); 
	And(a=instruction[15], b=instruction[1], out=out16);
	And(a=out16, b=out9, out=out17); 
	And(a=instruction[15], b=instruction[2], out=out18);
	And(a=out18, b=out10, out=out19); 
	
	Or(a=out15, b=out17, out=out20);
	Or(a=out19, b=out20, out=final);
	
	PC(in=out3, load=final, inc=true, reset=reset, out[0..14]=pc);
	
	
	
	
	
	
}